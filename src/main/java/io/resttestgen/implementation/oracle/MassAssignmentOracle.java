package io.resttestgen.implementation.oracle;

import com.google.common.collect.Sets;
import io.resttestgen.core.datatype.OperationSemantics;
import io.resttestgen.core.datatype.ParameterName;
import io.resttestgen.core.datatype.parameter.Parameter;
import io.resttestgen.core.datatype.parameter.ParameterUtils;
import io.resttestgen.core.datatype.parameter.structured.ArrayParameter;
import io.resttestgen.core.datatype.parameter.leaves.LeafParameter;
import io.resttestgen.core.datatype.parameter.structured.ObjectParameter;
import io.resttestgen.core.openapi.Operation;
import io.resttestgen.core.testing.Oracle;
import io.resttestgen.core.testing.TestInteraction;
import io.resttestgen.core.testing.TestResult;
import io.resttestgen.core.testing.TestSequence;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jetbrains.annotations.NotNull;

import java.util.Collection;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.regex.Pattern;

import static io.resttestgen.core.datatype.parameter.ParameterUtils.getLeaves;

/**
 * This oracle determines if a test sequences exposed a mass assignment vulnerability in the REST API.
 */
public class MassAssignmentOracle extends Oracle {

    private static final Logger logger = LogManager.getLogger(MassAssignmentOracle.class);

    private boolean useInferredCRUDInformation = false;

    private Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");

    @Override
    public TestResult assertTestSequence(TestSequence testSequence) {

        TestResult testResult = new TestResult();
        /*if (!testSequence.getGenerator().contains("MassAssignmentFuzzer")) {
            testResult.setError("This sequence was not generated by the MassAssignmentFuzzer, so it cannot be evaluated.");
        }*/

        // Count times the same value between injected and subsequent read operation is observed
        int sameValueCount = 0;

        // For each interaction in the sequence, search for interactions with injected parameters
        for (TestInteraction interaction : testSequence) {

            Optional<LeafParameter> injectedParameter = getInjectedParameter(interaction.getFuzzedOperation());
            if (injectedParameter.isPresent()) {

                Optional<LeafParameter> readParameter = getCorrespondingOutputParameter(testSequence,
                        testSequence.indexOf(interaction), injectedParameter.get());
                if (readParameter.isPresent()) {
                    String injParVal = injectedParameter.get().getConcreteValue().toString();
                    String readParVal = readParameter.get().getConcreteValue().toString();

                    if (injParVal.equals(readParVal)) {
                        sameValueCount++;
                    }
                }

            }
        }

        if (sameValueCount == 2) {
            testResult.setFail("The mass assignment injection was successful.");
        } else if (sameValueCount == 1) {
            testResult.setUnknown("The mass assignment injection was successful only for 1 attempt out of 2.");
        } else {
            testResult.setPass("The mass assignment injection was not successful.");
        }

        testSequence.addTestResult(this, testResult);
        return testResult;
    }

    /**
     * Check if a sequence is valid, i.e., it is among the following:
     * - C R
     * - C R D R
     * - C R U R
     * - C R U R D R
     * - RM C RM
     * - RM C RM D RM
     * - RM C RM U RM
     * - RM C RM U RM D RM
     * @return true if the sequence is valid.
     */


    /*private Object getIdOfCreatedResource(TestInteraction beforeCreate, TestInteraction afterCreate) {
        if (!beforeCreate.getOperation().getCrudSemantics().equals(CRUDSemantics.READ_MULTI) ||
                afterCreate.getOperation().getCrudSemantics().equals(CRUDSemantics.READ_MULTI)) {
            logger.warn("Can't get ID of created resource. You did not provide two READ MULTI operations.");
            return null;
        }

    }*/

    /**
     * Search for an injected parameter in an operation.
     * @param operation in which to search for the injected parameter.
     * @return the injected parameter leaf, if found.
     */
    private Optional<LeafParameter> getInjectedParameter(Operation operation) {

        // Search for parameter with injected tag and return it
        for (LeafParameter leaf : operation.getLeaves()) {
            if (leaf.getTags().contains("injected")) {
                return Optional.of(leaf);
            }
        }

        // Return empty if injected parameter was not found.
        return Optional.empty();
    }

    private Optional<LeafParameter> getCorrespondingOutputParameter(TestSequence testSequence, int injectedOperationIndex,
                                                                    LeafParameter injectedLeaf) {

        Optional<LeafParameter> candidateLeaf = Optional.empty();

        Operation createOperation = testSequence.get(injectedOperationIndex).getFuzzedOperation();
        Operation followingReadOperation = testSequence.get(injectedOperationIndex + 1).getFuzzedOperation();
        Operation previousReadOperation = null;


        Object resourceIdentifierVal = null;
        if (resourceIdentifierVal == null) {
            if (operationHasOutputWithResourceIdentifier(createOperation)) {
                resourceIdentifierVal = extractNewlyCreatedResourceIdentifier(createOperation);
            } else {
                previousReadOperation = testSequence.get(injectedOperationIndex - 1).getFuzzedOperation();
                if (getCRUDSemantics(testSequence.get(injectedOperationIndex).getFuzzedOperation()).equals(OperationSemantics.UPDATE)) {
                    previousReadOperation = testSequence.get(injectedOperationIndex - 3).getFuzzedOperation();
                }
                resourceIdentifierVal = extractNewlyCreatedResourceIdentifier(previousReadOperation, followingReadOperation);
            }
        }


        if (getCRUDSemantics(followingReadOperation).equals(OperationSemantics.READ) &&
                followingReadOperation.getResponseBody() != null) {
            for (LeafParameter leaf : getLeaves(followingReadOperation.getResponseBody())) {
                if (leaf.getNormalizedName().equals(injectedLeaf.getNormalizedName())) {
                    candidateLeaf = Optional.of(leaf);
                    break;
                }
                if (leaf.getName().equals(injectedLeaf.getName())) {
                    candidateLeaf = Optional.of(leaf);
                }
            }
        } else if (getCRUDSemantics(followingReadOperation).equals(OperationSemantics.READ_MULTI) &&
                followingReadOperation.getResponseBody() != null && previousReadOperation != null &&
                getCRUDSemantics(previousReadOperation).equals(OperationSemantics.READ_MULTI) &&
                previousReadOperation.getResponseBody() != null) {

            Parameter newObject = extractNewlyCreatedObject(previousReadOperation, followingReadOperation);

            if (newObject != null) {
                for (LeafParameter leaf : getLeaves(newObject)) {
                    if (leaf.getNormalizedName().equals(injectedLeaf.getNormalizedName())) {
                        candidateLeaf = Optional.of(leaf);
                        break;
                    }
                    if (leaf.getName().equals(injectedLeaf.getName())) {
                        candidateLeaf = Optional.of(leaf);
                    }
                }
            }
        } else if (getCRUDSemantics(followingReadOperation).equals(OperationSemantics.READ_MULTI) &&
                followingReadOperation.getResponseBody() != null && previousReadOperation == null) {

            Parameter newObject =
                    getElementWithIdentifierEqualTo(
                            getResponseBodyHigherLevelArray(followingReadOperation),
                            getResourceIdentifierName(followingReadOperation),
                            resourceIdentifierVal.toString());

            if (newObject != null) {
                for (LeafParameter leaf : getLeaves(newObject)) {
                    if (leaf.getNormalizedName().equals(injectedLeaf.getNormalizedName())) {
                        candidateLeaf = Optional.of(leaf);
                        break;
                    }
                    if (leaf.getName().equals(injectedLeaf.getName())) {
                        candidateLeaf = Optional.of(leaf);
                    }
                }
            }
        }

        return candidateLeaf;
    }

    private Parameter extractNewlyCreatedObject(Operation before, Operation after) {

        ParameterName resourceIdentifierName = getResourceIdentifierName(before);
        ArrayParameter beforeArray = getResponseBodyHigherLevelArray(before);
        ArrayParameter afterArray = getResponseBodyHigherLevelArray(after);

        if (beforeArray != null && afterArray != null && resourceIdentifierName != null &&
                beforeArray.getElements().size() < afterArray.getElements().size() &&
                resourceIdentifierName.equals(getResourceIdentifierName(after))) {

            Set<String> beforeIdentifiers = getSetOfIdentifiers(beforeArray, resourceIdentifierName);
            Set<String> afterIdentifiers = getSetOfIdentifiers(afterArray, resourceIdentifierName);

            Set<String> diff = Sets.difference(afterIdentifiers, beforeIdentifiers);

            if (diff.size() == 1) {
                for (String value : diff) {
                    return getElementWithIdentifierEqualTo(afterArray, resourceIdentifierName, value);
                }

            }

        }

        return null;
    }

    private ArrayParameter getResponseBodyHigherLevelArray(Operation operation) {

        Parameter responseBody = operation.getResponseBody();

        if (responseBody != null) {
            if (responseBody instanceof ArrayParameter) {
                return (ArrayParameter) responseBody;
            } else if (responseBody instanceof ObjectParameter) {
                for (Parameter element : ((ObjectParameter) responseBody).getProperties()) {
                    if (element instanceof ArrayParameter) {
                        return (ArrayParameter) element;
                    }
                }
            }
        }
        return null;
    }

    private ParameterName getResourceIdentifierName(Operation operation) {
        for (LeafParameter leaf : getSuccessfulOutputReferenceLeaves(operation)) {
            if (isCrudResourceIdentifier(leaf)) {
                return leaf.getName();
            }
        }
        return null;
    }

    private Set<String> getSetOfIdentifiers(ArrayParameter array, ParameterName identifierName) {

        Set<String> identifiers = new HashSet<>();

        for (Parameter element : array.getElements()) {
            for (LeafParameter leaf : getLeaves(element)) {
                if (leaf.getName().equals(identifierName)) {
                    identifiers.add(leaf.getConcreteValue().toString());
                }
            }
        }

        return identifiers;
    }

    private Parameter getElementWithIdentifierEqualTo(ArrayParameter array, ParameterName identifierName, String identifierValue) {
        for (Parameter element : array.getElements()) {
            for (LeafParameter leaf : getLeaves(element)) {
                if (leaf.getName().equals(identifierName) && leaf.getValue().toString().equals(identifierValue)) {
                    return element;
                }
            }
        }
        return null;
    }

    public Object extractNewlyCreatedResourceIdentifier(Operation createOperation) {
        ParameterName resourceIdentifierName = getResourceIdentifierName(createOperation);

        if (createOperation.getResponseBody() != null) {
            for (LeafParameter leaf : getLeaves(createOperation.getResponseBody())) {
                if (leaf.getName().equals(resourceIdentifierName)) {
                    return leaf.getConcreteValue();
                }
            }
        }

        return null;
    }

    private OperationSemantics getCRUDSemantics(Operation operation) {
        if (useInferredCRUDInformation) {
            return operation.getInferredCrudSemantics();
        }
        return operation.getCrudSemantics();
    }

    private boolean isCrudResourceIdentifier(LeafParameter leaf) {
        if (useInferredCRUDInformation) {
            return leaf.isInferredResourceIdentifier();
        }
        return leaf.isResourceIdentifier();
    }

    public void setUseInferredCRUDInformation(boolean useInferredCRUDInformation) {
        this.useInferredCRUDInformation = useInferredCRUDInformation;
    }

    private boolean operationHasOutputWithResourceIdentifier(Operation operation) {
        for (LeafParameter leaf : getSuccessfulOutputReferenceLeaves(operation)) {
            if (isCrudResourceIdentifier(leaf)) {
                return true;
            }
        }
        return false;
    }

    public Object extractNewlyCreatedResourceIdentifier(Operation before, Operation after) {
        ParameterName resourceIdentifierName = getResourceIdentifierName(before);
        ArrayParameter beforeArray = getResponseBodyHigherLevelArray(before);
        ArrayParameter afterArray = getResponseBodyHigherLevelArray(after);

        if (beforeArray != null && afterArray != null && resourceIdentifierName != null &&
                beforeArray.getElements().size() < afterArray.getElements().size() &&
                resourceIdentifierName.equals(getResourceIdentifierName(after))) {

            Set<String> beforeIdentifiers = getSetOfIdentifiers(beforeArray, resourceIdentifierName);
            Set<String> afterIdentifiers = getSetOfIdentifiers(afterArray, resourceIdentifierName);

            Set<String> diff = Sets.difference(afterIdentifiers, beforeIdentifiers);

            if (diff.size() == 1) {
                for (String value : diff) {
                    if (isNumeric(value)) {
                        double numVal = Double.parseDouble(value);
                        if (numVal % 1 == 0) {
                            return Integer.parseInt(value);
                        } else {
                            return numVal;
                        }
                    }
                    return value;
                }
            }
        }
        return null;
    }

    public boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        return pattern.matcher(strNum).matches();
    }


    @NotNull
    public Collection<LeafParameter> getSuccessfulOutputReferenceLeaves(Operation operation) {
        if (operation.getSuccessfulOutputParameters() != null) {
            return ParameterUtils.getReferenceLeaves(operation.getSuccessfulOutputParameters());
        }
        return new HashSet<>();
    }
}
